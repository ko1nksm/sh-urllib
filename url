#!/bin/sh
# shellcheck disable=SC2059

##########################################################################
# url is released under the BSD Zero Clause License
# https://github.com/ko1nksm/sh-urllib
##########################################################################

set -eu

usage() {
  cat << 'HERE'
Usage: url [-rs]             [-nSN] [--] URLPATH [PARAMETERS]...
Usage: url -p [-j DELIMITER] [-nSN] [--] FORMAT  [ARGUMENTS]...
Usage: url -e                 [-SN] [--] [ARGUMENTS]...
Usage: url -d                       [--] [ARGUMENTS]...

  URLPATH: url path
  PARAMETERS: [ -KEY VALUE | =STRING | #FRAGMENT ]...

Global options:
  -n                      Do not print the trailing newline character
  -p, --printf            printf mode (default: build mode)
  -e, --encode            URL Encoder mode
  -d, --decode            URL Decoder mode

Build mode options:
  -s                      Sort keys
  -r                      Remove empty value key

Printf mode options:
  -j, --join DELIMITER    Joins strings with the delimiter (default: '\n')

Character conversion Options:
  -S  Use + instead of %20
  -N  Normalize newline to \r\n
HERE
}

replace_all() {
  set -- "$1" "$2$3" "$3" "$4" ""
  while [ "$2" ]; do
    set -- "$1" "${2#*"$3"}" "$3" "$4" "$5${2%%"$3"*}$4"
  done
  eval "$1=\${5%\"\$4\"}"
}

do_urlbuild() {
  url=$(urlbuild "$@")
  printf '%s' "$url"
  [ "$SHURL_NONEWLINE" ] || echo
}

do_urlprintf() {
  format=$1 && shift
  [ $# -gt 0 ] || return 0
  urlprintf "${SHURL_DELIMITER}${format}" "$@" | {
    # shellcheck disable=SC2059
    delimiter=$(printf "${SHURL_DELIMITER}_")
    skip=$((${#delimiter} - 1))
    [ "$skip" -gt 0 ] && dd bs="$skip" count=1 >/dev/null 2>&1
    cat
  }
  [ "$SHURL_NONEWLINE" ] || echo
}

do_urlencode() {
  urlencode "$@"
}

do_urldecode() {
  urldecode "$@"
}

# urlbuild URLPATH [ARGUMENTS]...
#
#   URLPATH: url path
#   ARGUMENTS: [ -KEY VALUE | =STRING | #FRAGMENT ]...
#
#   Variables:
#     SHURL_SPACE: A character to use instead of %20
#     SHURL_EOL: Characters used on new lines
urlbuild() {
  LC_ALL=C awk -v space="$SHURL_SPACE" -v eol="$SHURL_EOL" \
    -v nullkey="$SHURL_REMOVENULLKEY" -v sortkey="$SHURL_SORTKEY" \
  '
    function encode(map, str,   i, len, ret) {
      len = length(str); ret = ""
      for (i = 1; i <= len; i++) ret = ret map[substr(str, i, 1)]
      return ret
    }

    function fix_eol(eol,   i) {
      for (i = 1; i < ARGC; i++) gsub(/\r\n/, "\n", ARGV[i])
      for (i = 1; i < ARGC; i++) gsub(/\n/, eol, ARGV[i])
    }

    function sort(ary,  len, min, tmp, i, j) {
      len = 0
      for (i in ary) len++
      for (i = 0; i < len - 1; i++) {
        min = i
        for (j = i + 1; j < len; j++) {
          if (ary[min] > ary[j]) min = j
        }
        tmp = ary[min]; ary[min] = ary[i]; ary[i] = tmp
      }
    }

    BEGIN {
      for(i = 0; i < 256; i++) {
        k = sprintf("%c", i); v = sprintf("%%%02X", i)
        uri[k] = (k ~ /[A-Za-z0-9_.!~*\47();\/?:@&=+$,#-]/) ? k : v
        url[k] = (k ~ /[A-Za-z0-9_.~-]/) ? k : v
      }
      if (length(space) > 0) uri[" "] = url[" "] = space
      if (length(eol) > 0) fix_eol(eol)

      path = encode(uri, ARGV[1]); params = fragment = ""; idx = 0
      for (i = 2; i < ARGC; i++) {
        if (sub(/^-/, "", ARGV[i])) {
          if (ARGV[++i] == "" && nullkey) continue
          kv[idx++] = encode(url, ARGV[i - 1]) " " encode(url, ARGV[i])
        } else if (sub(/^=/, "", ARGV[i])) {
          kv[idx++] = encode(url, ARGV[i])
        } else if (sub(/^#/, "", ARGV[i])) {
          fragment = fragment "#" encode(url, ARGV[i])
        }
      }

      if (sortkey) sort(kv)
      for (i = 0; i < idx; i++) sub(" ", "=", kv[i])
      params = kv[0]
      for (i = 1; i < idx; i++) params = params "&" kv[i]

      if (length(path) > 0 && length(params) > 0) path = path "?"
      print path params fragment
    }
  ' "$@"
}

# urlprintf FORMAT [ARGUMENTS]...
#
#   FORMAT: printf format
#   ARGUMENTS: printf argument to be URL-encoded
#
#   Variables:
#     SHURL_SPACE: A character to use instead of %20
#     SHURL_EOL: Characters used on new lines
urlprintf() {
  { shift && urlencode "$@"; } | (
    set -- "$1"
    while IFS= read -r line; do
      set -- "$@" "$line"
    done
    printf -- "$@"
  )
}

urlencode() {
  LC_ALL=C awk -v space="$SHURL_SPACE" -v eol="$SHURL_EOL" '
    function encode(map, str,   i, len, ret) {
      len = length(str); ret = ""
      for (i = 1; i <= len; i++) ret = ret map[substr(str, i, 1)]
      return ret
    }

    function fix_eol(eol,   i) {
      for (i = 1; i < ARGC; i++) gsub(/\r\n/, "\n", ARGV[i])
      for (i = 1; i < ARGC; i++) gsub(/\n/, eol, ARGV[i])
    }

    BEGIN {
      for(i = 0; i < 256; i++) {
        k = sprintf("%c", i); v = sprintf("%%%02X", i)
        url[k] = (k ~ /[A-Za-z0-9_.~-]/) ? k : v
      }
      if (length(space) > 0) uri[" "] = url[" "] = space
      if (length(eol) > 0) fix_eol(eol)
    }

    BEGIN {
      for (i = 1; i < ARGC; i++) print encode(url, ARGV[i])
      if (ARGC > 1) exit
    }

    {
      print encode(url, $0)
    }
  ' "$@"
}

urldecode() {
  LC_ALL=C awk -v space="$SHURL_SPACE" -v eol="$SHURL_EOL" '
    function decode(map, str,   ret) {
      while (match(str, /%[0-9A-Fa-f][0-9A-Fa-f]/)) {
        ret = ret substr(str, 1, RSTART - 1) url[substr(str, RSTART + 1, 2)]
        str = substr(str, RSTART + RLENGTH)
      }
      return ret str
    }

    BEGIN {
      for (i = 0; i < 256; i++) url[sprintf("%02x", i)] = sprintf("%c", i)

      # Increase to 4 patterns to improve performance
      for (k in url) {
        m = substr(k, 1, 1); M = toupper(m)
        l = substr(k, 2, 1); L = toupper(l)
        url[m L] = url[M l] = url[M L] = url[k]
      }
    }

    BEGIN {
      for (i = 1; i < ARGC; i++) print decode(url, ARGV[i])
      if (ARGC > 1) exit
    }

    {
      print decode(url, $0)
    }
  ' "$@"
}

SHURL_REMOVENULLKEY='' SHURL_SORTKEY='' SHURL_DELIMITER='\n'
SHURL_SPACE='' SHURL_EOL='' SHURL_NONEWLINE=''
mode='build'
while [ $# -gt 0 ]; do
  case $1 in
    -SN | -NS) SHURL_SPACE='+' SHURL_EOL='\r\n' ;;
    -S) SHURL_SPACE='+' ;;
    -N) SHURL_EOL='\r\n' ;;
    -n) SHURL_NONEWLINE=1 ;;
    -r) SHURL_REMOVENULLKEY=1 ;;
    -s) SHURL_SORTKEY=1 ;;
    -p | --printf) mode='printf' ;;
    -e | --encode) mode='encode' ;;
    -d | --decode) mode='decode' ;;
    -j | --join) SHURL_DELIMITER=${2:-} && shift ;;
    -h | --help) usage && exit 0 ;;
    --) shift && break ;;
    -*) echo "Unknown option $1" >&2 && exit 1 ;;
    *) break ;;
  esac
  shift
done

sanitize() {
  replace_all sanitize "$2" '%' '%%'
  sanitize=$(printf "$sanitize"_) && sanitize=${sanitize%_}
  replace_all sanitize "$sanitize" '%' '%%'
  replace_all "$1" "$sanitize" "\\" "\\\\"
}
[ "$SHURL_DELIMITER" = '\n' ] || sanitize SHURL_DELIMITER "$SHURL_DELIMITER"

"do_url${mode}" "$@"
